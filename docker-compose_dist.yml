version: '3.3'

services:
    # PostgreSQL
    db:
        image: postgres:13
        command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
        environment:
            # IMPORTANT: these three params must be the same than POSTGRES_USERNAME, POSTGRES_PASSWORD, POSTGRES_DB
            # below in 'web' service respectively
            POSTGRES_USER: ''
            POSTGRES_PASSWORD: ''
            POSTGRES_DB: 'multiomics'
        volumes:
            - postgres_data:/var/lib/postgresql/data/
            - ./config/postgres/postgres.conf:/etc/postgresql/postgresql.conf
        # There's a problem with IPVS connections timeout.
        # See: https://github.com/moby/moby/issues/37466 or https://stackoverflow.com/a/64507844/7058363
        deploy:
            endpoint_mode: dnsrr

    # MongoDB Server
    mongo:
        image: mongo:4.2
        environment:
            # IMPORTANT: these three params must be the same than MONGO_USERNAME, MONGO_PASSWORD, MONGO_DB
            # below in 'web' service respectively
            MONGO_INITDB_ROOT_USERNAME: ''
            MONGO_INITDB_ROOT_PASSWORD: ''
            MONGO_INITDB_DATABASE: 'multiomics'
        # Sets the config file
        command: --config /etc/mongo/mongod.conf
        volumes:
            - mongo_data:/data/db
            - mongo_data:/data/configdb
            - ./config/mongo/mongod.conf:/etc/mongo/mongod.conf

    # Redis Server for Websockets connections
    redis:
        image: redis:6.0.8

    # Django Proxy Server
    nginx:
        image: nginx:1.19.3
        ports:
            - 80:8000
            # - 443:443 # Uncomment for HTTPS support
        volumes:
            - ./config/nginx/conf.d:/etc/nginx/conf.d
            - ./config/nginx/certificates:/etc/nginx/certificates
            - ./src:/src
            - ./src/static:/static
            - ./src/media:/media
        depends_on:
            - web
            
    # Django Backend Server
    web:
        image: omicsdatascience/multiomics:4.4
        # Note: uses dev settings when generates the key to avoid FileNotFoundError exception
        # when the key is generated at the first time
        command: bash -c "cd frontend/static/frontend &&
            npm i &&
            npm run prod &&
            cd /src &&
            python3 manage.py generate_secret_key --settings='multiomics_intermediate.settings' && 
            python3 manage.py collectstatic --no-input &&
            python3 manage.py makemigrations && 
            python3 manage.py migrate && 
            daphne -b 0.0.0.0 -p 8000 multiomics_intermediate.asgi:application"
        volumes:
            - ./src:/src
            - ./src/static:/static
            - ./src/media:/media
        depends_on:
            - db
            - mongo
        environment:
            # Django
            DJANGO_SETTINGS_MODULE: 'multiomics_intermediate.settings_prod'
            RESULT_DATAFRAME_LIMIT_ROWS: 500
            TABLE_PAGE_SIZE: 10

            # PostgreSQL DB connection parameters (MUST match the parameters defined in the "db" service above)
            POSTGRES_USERNAME: ''
            POSTGRES_PASSWORD: ''
            POSTGRES_HOST: 'db'
            POSTGRES_PORT: 5432
            POSTGRES_DB: 'multiomics'
                
            # Mongo DB connection parameters (MUST match the parameters defined in the "mongo" service above)
            MONGO_USERNAME: ''
            MONGO_PASSWORD: ''
            MONGO_HOST: 'mongo'
            MONGO_PORT: 27017
            MONGO_DB: 'multiomics'

            # Redis
            REDIS_HOST: 'redis'
            REDIS_PORT: 6379

volumes:
    mongo_data:
        external:
            name: 'multiomics_intermediate_mongo_data'
    mongo_config:
        external:
            name: 'multiomics_intermediate_mongo_config'
    postgres_data:
        external:
            name: 'multiomics_intermediate_postgres_data'
