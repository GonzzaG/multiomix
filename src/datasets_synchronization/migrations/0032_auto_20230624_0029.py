# Generated by Django 3.2.13 on 2023-06-24 00:29
import logging

from django.db import migrations
from django.db.models import Q

from datasets_synchronization.models import CGDSStudySynchronizationState, CGDSStudy, CGDSDataset
from datasets_synchronization.synchronization_service import global_synchronization_service

# Old and new cBioPortal URLs to download the datasets
OLD_URL = 'http://download.cbioportal.org/'
NEW_URL = 'https://cbioportal-datahub.s3.amazonaws.com/'

def rename_dataset_file_paths(dataset: CGDSDataset):
    """Renames the file path of the dataset to the new cBioPortal version."""
    if dataset is None:
        return

    file_path = dataset.file_path
    if file_path in ['data_expression_median.txt', 'data_mRNA_median_Zscores.txt']:
        new_file_path = 'data_mrna_agilent_microarray_zscores_ref_all_samples.txt'
    elif file_path == 'data_RNA_Seq_mRNA_median_Zscores.txt':
        new_file_path = 'data_mrna_seq_rpkm_zscores_ref_all_samples.txt'
    elif file_path == 'data_RNA_Seq_expression_tpm_Zscores.txt':
        new_file_path = 'data_RNA_Seq_expression_tpm_all_sample_Zscores.txt'
    elif file_path == 'data_rna_seq_mrna_median_Zscores.txt':
        new_file_path = 'data_mrna_seq_rpkm.txt'
    elif file_path in ['data_RNA_Seq_v2_mRNA_median_Zscores.txt', 'data_RNA_Seq_v2_expression_median.txt',
                       'data_RNA_Seq_v2_expression_RSEM_UQ_Log2.txt']:
        new_file_path = 'data_mrna_seq_v2_rsem_zscores_ref_all_samples.txt'
    elif file_path == 'data_miRNA_median_Zscores.txt':
        new_file_path = 'data_mirna_zscores.txt'
    elif file_path == 'data_expression_miRNA.txt':
        new_file_path = 'data_mirna.txt'
    elif file_path in ['data_CNA.txt', 'data_linear_CNA.txt']:
        # NOTE: some studies have only data_linear_cna.txt. But those must be fixed in production
        new_file_path = 'data_cna.txt'
    elif file_path == 'data_bcr_clinical_data_sample.txt':
        new_file_path = 'data_clinical_sample.txt'
    elif file_path == 'data_bcr_clinical_data_patient.txt':
        new_file_path = 'data_clinical_patient.txt'
    else:
        # All the other file names keep the same, need to be fixed in production
        new_file_path = file_path

    dataset.file_path = new_file_path
    dataset.save(update_fields=['file_path'])

def rename_all_datasets_file_path(study: CGDSStudy):
    """Renames the file paths of all the datasets of the study to the new cBioPortal version."""
    rename_dataset_file_paths(study.mrna_dataset)
    rename_dataset_file_paths(study.mirna_dataset)
    rename_dataset_file_paths(study.cna_dataset)
    rename_dataset_file_paths(study.methylation_dataset)

def copy_cgds_studies(apps, schema_editor):
    """
    Generates a copy of existing studies to prevent errors with already existing experiments and updates the
    file references for the new cBioPortal versions
    """
    # Removes all the datasets without study
    for dataset in CGDSDataset.objects.all():
        if dataset.study is None:
            logging.warning(f'No study for dataset: "{dataset}". Removing it...')
            dataset.delete()

    # Updates old URLs to the new S3 links
    old_urls_studies = CGDSStudy.objects.filter(Q(url__startswith=OLD_URL))
    for study in old_urls_studies:
        study.url = study.url.replace(OLD_URL, NEW_URL)
        study.save(update_fields=['url'])

    # Generates a copy of all the studies to prevent errors with already existing experiments
    for cgds_study in CGDSStudy.objects.all():
        cgds_study_copy = global_synchronization_service.generate_study_new_version(cgds_study)

        # Updates the file paths to the new cBioPortal version
        rename_all_datasets_file_path(cgds_study_copy)

        # Updates state and save all the changes
        cgds_study_copy.state = CGDSStudySynchronizationState.NOT_SYNCHRONIZED
        cgds_study_copy.save(update_fields=['state'])


class Migration(migrations.Migration):

    dependencies = [
        ('feature_selection', '0012_auto_20230508_1647'),
        ('statistical_properties', '0003_statisticalvalidation_statisticalvalidationsourceresult'),
        ('datasets_synchronization', '0031_alter_cgdsdataset_mongo_collection_name'),
    ]

    operations = [
        migrations.RunPython(copy_cgds_studies),
    ]
